/* tslint:disable */
/* eslint-disable */
/**
 * MVC Bridge API Spec
 * API definition for Mvc Bridge provided apis
 *
 * The version of the OpenAPI document: 1.0.7
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The deposits waiting for request to confirm target.
 * @export
 * @interface OrderFinalized
 */
export interface OrderFinalized {
    /**
     * The vault id of your request.
     * @type {string}
     * @memberof OrderFinalized
     */
    vaultId?: string;
    /**
     * The txid of your request.
     * @type {string}
     * @memberof OrderFinalized
     */
    txid?: string;
    /**
     * The time when your request finalize.
     * @type {number}
     * @memberof OrderFinalized
     */
    finalizedTimestamp?: number;
    /**
     * The address from which you send your tx. Must be valid source in the transaction.
     * @type {string}
     * @memberof OrderFinalized
     */
    fromAddress?: string;
    /**
     * Amount you sent, use String for large values.
     * @type {string}
     * @memberof OrderFinalized
     */
    fromAmount?: string;
    /**
     * State of your order(SUCCESS, DROPPED, MINIMUM_NOT_MET).
     * @type {string}
     * @memberof OrderFinalized
     */
    state?: string;
    /**
     * The vault id of your target request.
     * @type {string}
     * @memberof OrderFinalized
     */
    targetVaultId?: string;
    /**
     * The address you want to bridge your asset to.
     * @type {string}
     * @memberof OrderFinalized
     */
    toAddress?: string;
    /**
     * Amount you can receive after the fee, use String for large values.
     * @type {string}
     * @memberof OrderFinalized
     */
    targetAmount?: string;
    /**
     * The txid of the transaction that processed your request.
     * @type {string}
     * @memberof OrderFinalized
     */
    processTxid?: string;
}
/**
 * The deposits waiting for request to confirm target.
 * @export
 * @interface OrderPending
 */
export interface OrderPending {
    /**
     * The vault id of your request.
     * @type {string}
     * @memberof OrderPending
     */
    vaultId?: string;
    /**
     * The txid of your request.
     * @type {string}
     * @memberof OrderPending
     */
    txid?: string;
    /**
     * The address from which you send your tx. Must be valid source in the transaction.
     * @type {string}
     * @memberof OrderPending
     */
    fromAddress?: string;
    /**
     * Amount you sent, use String for large values.
     * @type {string}
     * @memberof OrderPending
     */
    fromAmount?: string;
    /**
     * State of your order(WAITING_REQUEST, CONFIRMING, PROCESSING).
     * @type {string}
     * @memberof OrderPending
     */
    state?: string;
    /**
     * The vault id of your target request.
     * @type {string}
     * @memberof OrderPending
     */
    targetVaultId?: string;
    /**
     * The address you want to bridge your asset to.
     * @type {string}
     * @memberof OrderPending
     */
    toAddress?: string;
    /**
     * Amount you can receive after the fee, use String for large values.
     * @type {string}
     * @memberof OrderPending
     */
    targetAmount?: string;
    /**
     * The confirmation needed for the deposit transaction.
     * @type {number}
     * @memberof OrderPending
     */
    confirmationRequired?: number;
    /**
     * The current confirmation of the deposit transaction.
     * @type {number}
     * @memberof OrderPending
     */
    currentConfirmation?: number;
}
/**
 * Register a bridging request.
 * @export
 * @interface OrderRegisterRequest
 */
export interface OrderRegisterRequest {
    /**
     * The public chain of your source address(mvc eth tron bsc ...)
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    fromChain?: string;
    /**
     * The token name you sent(usdt usdc ...)
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    fromTokenName?: string;
    /**
     * The transaction of your sending request. Must be found on the blockchain to proceed.
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    txid?: string;
    /**
     * Amount you send, use String for large values.
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    amount?: string;
    /**
     * The address from which you send your tx. Must be valid source in the transaction.
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    fromAddress?: string;
    /**
     * The public chain you want to bridge your asset to (mvc eth tron bsc ...).
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    toChain?: string;
    /**
     * The token name you want to receive(usdt usdc ...)
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    toTokenName?: string;
    /**
     * The address you want to bridge your asset to.
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    toAddress?: string;
    /**
     * The signature indicating you are the owner of fromAddress.
     * @type {string}
     * @memberof OrderRegisterRequest
     */
    signature?: string;
}
/**
 * 
 * @export
 * @interface OrderRegisterResp
 */
export interface OrderRegisterResp {
    /**
     * The txid of your request.
     * @type {string}
     * @memberof OrderRegisterResp
     */
    orderTxid?: string;
    /**
     * True if registered successful.
     * @type {boolean}
     * @memberof OrderRegisterResp
     */
    success?: boolean;
    /**
     * The reason of your failed request.
     * @type {string}
     * @memberof OrderRegisterResp
     */
    message?: string;
}
/**
 * The  vault info for the token.
 * @export
 * @interface VaultInfoResponse
 */
export interface VaultInfoResponse {
    /**
     * The deposit address for the vault.
     * @type {string}
     * @memberof VaultInfoResponse
     */
    address?: string;
    /**
     * The public chain of your source address(mvc eth tron bsc ...)
     * @type {string}
     * @memberof VaultInfoResponse
     */
    chain?: string;
    /**
     * The token name you sent(usdt usdc ...)
     * @type {string}
     * @memberof VaultInfoResponse
     */
    tokenName?: string;
    /**
     * The decimal of the token.
     * @type {number}
     * @memberof VaultInfoResponse
     */
    decimal?: number;
    /**
     * The minimum amount of the token to deposit, if deposit amount is lower than this, it will not be processed.
     * @type {number}
     * @memberof VaultInfoResponse
     */
    depositMinAmount?: number;
    /**
     * The confirmation needed for the deposit transaction.
     * @type {number}
     * @memberof VaultInfoResponse
     */
    depositConfirmation?: number;
    /**
     * Gas fee to cover onchain transfer. AmountYouReceive = amountYouSent - withdrawGasFee - withdrawBridgeFeeRate * amountYouSend
     * @type {number}
     * @memberof VaultInfoResponse
     */
    withdrawGasFee?: number;
    /**
     * The service fee rate of bridge. AmountYouReceive = amountYouSent - withdrawGasFee - withdrawBridgeFeeRate * amountYouSend
     * @type {string}
     * @memberof VaultInfoResponse
     */
    withdrawBridgeFeeRate?: string;
}

/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the deposits waiting for request.
         * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} fromTokenName The token name you sent(usdt usdc ...)
         * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderFromChainFromTokenNameAddressFinalizedGet: async (fromChain: string, fromTokenName: string, address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromChain' is not null or undefined
            if (fromChain === null || fromChain === undefined) {
                throw new RequiredError('fromChain','Required parameter fromChain was null or undefined when calling orderFromChainFromTokenNameAddressFinalizedGet.');
            }
            // verify required parameter 'fromTokenName' is not null or undefined
            if (fromTokenName === null || fromTokenName === undefined) {
                throw new RequiredError('fromTokenName','Required parameter fromTokenName was null or undefined when calling orderFromChainFromTokenNameAddressFinalizedGet.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling orderFromChainFromTokenNameAddressFinalizedGet.');
            }
            const localVarPath = `/order/{fromChain}/{fromTokenName}/{address}/finalized`
                .replace(`{${"fromChain"}}`, encodeURIComponent(String(fromChain)))
                .replace(`{${"fromTokenName"}}`, encodeURIComponent(String(fromTokenName)))
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the deposits waiting for request or not processed yet.
         * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} fromTokenName The token name you sent(usdt usdc ...)
         * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderFromChainFromTokenNameAddressPendingGet: async (fromChain: string, fromTokenName: string, address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromChain' is not null or undefined
            if (fromChain === null || fromChain === undefined) {
                throw new RequiredError('fromChain','Required parameter fromChain was null or undefined when calling orderFromChainFromTokenNameAddressPendingGet.');
            }
            // verify required parameter 'fromTokenName' is not null or undefined
            if (fromTokenName === null || fromTokenName === undefined) {
                throw new RequiredError('fromTokenName','Required parameter fromTokenName was null or undefined when calling orderFromChainFromTokenNameAddressPendingGet.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling orderFromChainFromTokenNameAddressPendingGet.');
            }
            const localVarPath = `/order/{fromChain}/{fromTokenName}/{address}/pending`
                .replace(`{${"fromChain"}}`, encodeURIComponent(String(fromChain)))
                .replace(`{${"fromTokenName"}}`, encodeURIComponent(String(fromTokenName)))
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new order to the bridge.
         * @param {OrderRegisterRequest} [orderRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderRegisterPost: async (orderRegisterRequest?: OrderRegisterRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof orderRegisterRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(orderRegisterRequest !== undefined ? orderRegisterRequest : {})
                : (orderRegisterRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the deposits waiting for request.
         * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} fromTokenName The token name you sent(usdt usdc ...)
         * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderFromChainFromTokenNameAddressFinalizedGet(fromChain: string, fromTokenName: string, address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderFinalized>>> {
            const localVarAxiosArgs = await OrderApiAxiosParamCreator(configuration).orderFromChainFromTokenNameAddressFinalizedGet(fromChain, fromTokenName, address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the deposits waiting for request or not processed yet.
         * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} fromTokenName The token name you sent(usdt usdc ...)
         * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderFromChainFromTokenNameAddressPendingGet(fromChain: string, fromTokenName: string, address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderPending>>> {
            const localVarAxiosArgs = await OrderApiAxiosParamCreator(configuration).orderFromChainFromTokenNameAddressPendingGet(fromChain, fromTokenName, address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register a new order to the bridge.
         * @param {OrderRegisterRequest} [orderRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderRegisterPost(orderRegisterRequest?: OrderRegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderRegisterResp>> {
            const localVarAxiosArgs = await OrderApiAxiosParamCreator(configuration).orderRegisterPost(orderRegisterRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get the deposits waiting for request.
         * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} fromTokenName The token name you sent(usdt usdc ...)
         * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderFromChainFromTokenNameAddressFinalizedGet(fromChain: string, fromTokenName: string, address: string, options?: any): AxiosPromise<Array<OrderFinalized>> {
            return OrderApiFp(configuration).orderFromChainFromTokenNameAddressFinalizedGet(fromChain, fromTokenName, address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the deposits waiting for request or not processed yet.
         * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} fromTokenName The token name you sent(usdt usdc ...)
         * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderFromChainFromTokenNameAddressPendingGet(fromChain: string, fromTokenName: string, address: string, options?: any): AxiosPromise<Array<OrderPending>> {
            return OrderApiFp(configuration).orderFromChainFromTokenNameAddressPendingGet(fromChain, fromTokenName, address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new order to the bridge.
         * @param {OrderRegisterRequest} [orderRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderRegisterPost(orderRegisterRequest?: OrderRegisterRequest, options?: any): AxiosPromise<OrderRegisterResp> {
            return OrderApiFp(configuration).orderRegisterPost(orderRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary Get the deposits waiting for request.
     * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
     * @param {string} fromTokenName The token name you sent(usdt usdc ...)
     * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderFromChainFromTokenNameAddressFinalizedGet(fromChain: string, fromTokenName: string, address: string, options?: any) {
        return OrderApiFp(this.configuration).orderFromChainFromTokenNameAddressFinalizedGet(fromChain, fromTokenName, address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the deposits waiting for request or not processed yet.
     * @param {string} fromChain The public chain of your source address(mvc eth tron bsc ...)
     * @param {string} fromTokenName The token name you sent(usdt usdc ...)
     * @param {string} address The address from which you send your tx. Must be valid source in the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderFromChainFromTokenNameAddressPendingGet(fromChain: string, fromTokenName: string, address: string, options?: any) {
        return OrderApiFp(this.configuration).orderFromChainFromTokenNameAddressPendingGet(fromChain, fromTokenName, address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new order to the bridge.
     * @param {OrderRegisterRequest} [orderRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderRegisterPost(orderRegisterRequest?: OrderRegisterRequest, options?: any) {
        return OrderApiFp(this.configuration).orderRegisterPost(orderRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VaultApi - axios parameter creator
 * @export
 */
export const VaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the vault info for the token.
         * @param {string} chainName The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} tokenName The token name you sent(usdt usdc ...)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultChainNameTokenNameInfoGet: async (chainName: string, tokenName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            if (chainName === null || chainName === undefined) {
                throw new RequiredError('chainName','Required parameter chainName was null or undefined when calling vaultChainNameTokenNameInfoGet.');
            }
            // verify required parameter 'tokenName' is not null or undefined
            if (tokenName === null || tokenName === undefined) {
                throw new RequiredError('tokenName','Required parameter tokenName was null or undefined when calling vaultChainNameTokenNameInfoGet.');
            }
            const localVarPath = `/vault/{chainName}/{tokenName}/info`
                .replace(`{${"chainName"}}`, encodeURIComponent(String(chainName)))
                .replace(`{${"tokenName"}}`, encodeURIComponent(String(tokenName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultApi - functional programming interface
 * @export
 */
export const VaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the vault info for the token.
         * @param {string} chainName The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} tokenName The token name you sent(usdt usdc ...)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vaultChainNameTokenNameInfoGet(chainName: string, tokenName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultInfoResponse>> {
            const localVarAxiosArgs = await VaultApiAxiosParamCreator(configuration).vaultChainNameTokenNameInfoGet(chainName, tokenName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VaultApi - factory interface
 * @export
 */
export const VaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get the vault info for the token.
         * @param {string} chainName The public chain of your source address(mvc eth tron bsc ...)
         * @param {string} tokenName The token name you sent(usdt usdc ...)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vaultChainNameTokenNameInfoGet(chainName: string, tokenName: string, options?: any): AxiosPromise<VaultInfoResponse> {
            return VaultApiFp(configuration).vaultChainNameTokenNameInfoGet(chainName, tokenName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VaultApi - object-oriented interface
 * @export
 * @class VaultApi
 * @extends {BaseAPI}
 */
export class VaultApi extends BaseAPI {
    /**
     * 
     * @summary Get the vault info for the token.
     * @param {string} chainName The public chain of your source address(mvc eth tron bsc ...)
     * @param {string} tokenName The token name you sent(usdt usdc ...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultApi
     */
    public vaultChainNameTokenNameInfoGet(chainName: string, tokenName: string, options?: any) {
        return VaultApiFp(this.configuration).vaultChainNameTokenNameInfoGet(chainName, tokenName, options).then((request) => request(this.axios, this.basePath));
    }
}


